/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.prosper.chasing.common.interfaces.data;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-01-05")
public class UserTr implements org.apache.thrift.TBase<UserTr, UserTr._Fields>, java.io.Serializable, Cloneable, Comparable<UserTr> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserTr");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DISTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("distance", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ROLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("roleType", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField HILL_FIELD_DESC = new org.apache.thrift.protocol.TField("hill", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField RIVER_FIELD_DESC = new org.apache.thrift.protocol.TField("river", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField STEPS_FIELD_DESC = new org.apache.thrift.protocol.TField("steps", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserTrStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserTrTupleSchemeFactory();

  public int id; // required
  public java.lang.String name; // required
  public int distance; // required
  public byte roleType; // required
  public int hill; // required
  public int river; // required
  public byte state; // required
  public int gameId; // required
  public int steps; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    DISTANCE((short)3, "distance"),
    ROLE_TYPE((short)4, "roleType"),
    HILL((short)5, "hill"),
    RIVER((short)6, "river"),
    STATE((short)7, "state"),
    GAME_ID((short)8, "gameId"),
    STEPS((short)9, "steps");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // DISTANCE
          return DISTANCE;
        case 4: // ROLE_TYPE
          return ROLE_TYPE;
        case 5: // HILL
          return HILL;
        case 6: // RIVER
          return RIVER;
        case 7: // STATE
          return STATE;
        case 8: // GAME_ID
          return GAME_ID;
        case 9: // STEPS
          return STEPS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __DISTANCE_ISSET_ID = 1;
  private static final int __ROLETYPE_ISSET_ID = 2;
  private static final int __HILL_ISSET_ID = 3;
  private static final int __RIVER_ISSET_ID = 4;
  private static final int __STATE_ISSET_ID = 5;
  private static final int __GAMEID_ISSET_ID = 6;
  private static final int __STEPS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISTANCE, new org.apache.thrift.meta_data.FieldMetaData("distance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("roleType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.HILL, new org.apache.thrift.meta_data.FieldMetaData("hill", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RIVER, new org.apache.thrift.meta_data.FieldMetaData("river", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STEPS, new org.apache.thrift.meta_data.FieldMetaData("steps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserTr.class, metaDataMap);
  }

  public UserTr() {
  }

  public UserTr(
    int id,
    java.lang.String name,
    int distance,
    byte roleType,
    int hill,
    int river,
    byte state,
    int gameId,
    int steps)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.distance = distance;
    setDistanceIsSet(true);
    this.roleType = roleType;
    setRoleTypeIsSet(true);
    this.hill = hill;
    setHillIsSet(true);
    this.river = river;
    setRiverIsSet(true);
    this.state = state;
    setStateIsSet(true);
    this.gameId = gameId;
    setGameIdIsSet(true);
    this.steps = steps;
    setStepsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserTr(UserTr other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.distance = other.distance;
    this.roleType = other.roleType;
    this.hill = other.hill;
    this.river = other.river;
    this.state = other.state;
    this.gameId = other.gameId;
    this.steps = other.steps;
  }

  public UserTr deepCopy() {
    return new UserTr(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setDistanceIsSet(false);
    this.distance = 0;
    setRoleTypeIsSet(false);
    this.roleType = 0;
    setHillIsSet(false);
    this.hill = 0;
    setRiverIsSet(false);
    this.river = 0;
    setStateIsSet(false);
    this.state = 0;
    setGameIdIsSet(false);
    this.gameId = 0;
    setStepsIsSet(false);
    this.steps = 0;
  }

  public int getId() {
    return this.id;
  }

  public UserTr setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.name;
  }

  public UserTr setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getDistance() {
    return this.distance;
  }

  public UserTr setDistance(int distance) {
    this.distance = distance;
    setDistanceIsSet(true);
    return this;
  }

  public void unsetDistance() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISTANCE_ISSET_ID);
  }

  /** Returns true if field distance is set (has been assigned a value) and false otherwise */
  public boolean isSetDistance() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISTANCE_ISSET_ID);
  }

  public void setDistanceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISTANCE_ISSET_ID, value);
  }

  public byte getRoleType() {
    return this.roleType;
  }

  public UserTr setRoleType(byte roleType) {
    this.roleType = roleType;
    setRoleTypeIsSet(true);
    return this;
  }

  public void unsetRoleType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROLETYPE_ISSET_ID);
  }

  /** Returns true if field roleType is set (has been assigned a value) and false otherwise */
  public boolean isSetRoleType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROLETYPE_ISSET_ID);
  }

  public void setRoleTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROLETYPE_ISSET_ID, value);
  }

  public int getHill() {
    return this.hill;
  }

  public UserTr setHill(int hill) {
    this.hill = hill;
    setHillIsSet(true);
    return this;
  }

  public void unsetHill() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HILL_ISSET_ID);
  }

  /** Returns true if field hill is set (has been assigned a value) and false otherwise */
  public boolean isSetHill() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HILL_ISSET_ID);
  }

  public void setHillIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HILL_ISSET_ID, value);
  }

  public int getRiver() {
    return this.river;
  }

  public UserTr setRiver(int river) {
    this.river = river;
    setRiverIsSet(true);
    return this;
  }

  public void unsetRiver() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RIVER_ISSET_ID);
  }

  /** Returns true if field river is set (has been assigned a value) and false otherwise */
  public boolean isSetRiver() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RIVER_ISSET_ID);
  }

  public void setRiverIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RIVER_ISSET_ID, value);
  }

  public byte getState() {
    return this.state;
  }

  public UserTr setState(byte state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public int getGameId() {
    return this.gameId;
  }

  public UserTr setGameId(int gameId) {
    this.gameId = gameId;
    setGameIdIsSet(true);
    return this;
  }

  public void unsetGameId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GAMEID_ISSET_ID);
  }

  /** Returns true if field gameId is set (has been assigned a value) and false otherwise */
  public boolean isSetGameId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GAMEID_ISSET_ID);
  }

  public void setGameIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GAMEID_ISSET_ID, value);
  }

  public int getSteps() {
    return this.steps;
  }

  public UserTr setSteps(int steps) {
    this.steps = steps;
    setStepsIsSet(true);
    return this;
  }

  public void unsetSteps() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STEPS_ISSET_ID);
  }

  /** Returns true if field steps is set (has been assigned a value) and false otherwise */
  public boolean isSetSteps() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STEPS_ISSET_ID);
  }

  public void setStepsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STEPS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case DISTANCE:
      if (value == null) {
        unsetDistance();
      } else {
        setDistance((java.lang.Integer)value);
      }
      break;

    case ROLE_TYPE:
      if (value == null) {
        unsetRoleType();
      } else {
        setRoleType((java.lang.Byte)value);
      }
      break;

    case HILL:
      if (value == null) {
        unsetHill();
      } else {
        setHill((java.lang.Integer)value);
      }
      break;

    case RIVER:
      if (value == null) {
        unsetRiver();
      } else {
        setRiver((java.lang.Integer)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((java.lang.Byte)value);
      }
      break;

    case GAME_ID:
      if (value == null) {
        unsetGameId();
      } else {
        setGameId((java.lang.Integer)value);
      }
      break;

    case STEPS:
      if (value == null) {
        unsetSteps();
      } else {
        setSteps((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case DISTANCE:
      return getDistance();

    case ROLE_TYPE:
      return getRoleType();

    case HILL:
      return getHill();

    case RIVER:
      return getRiver();

    case STATE:
      return getState();

    case GAME_ID:
      return getGameId();

    case STEPS:
      return getSteps();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case DISTANCE:
      return isSetDistance();
    case ROLE_TYPE:
      return isSetRoleType();
    case HILL:
      return isSetHill();
    case RIVER:
      return isSetRiver();
    case STATE:
      return isSetState();
    case GAME_ID:
      return isSetGameId();
    case STEPS:
      return isSetSteps();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof UserTr)
      return this.equals((UserTr)that);
    return false;
  }

  public boolean equals(UserTr that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_distance = true;
    boolean that_present_distance = true;
    if (this_present_distance || that_present_distance) {
      if (!(this_present_distance && that_present_distance))
        return false;
      if (this.distance != that.distance)
        return false;
    }

    boolean this_present_roleType = true;
    boolean that_present_roleType = true;
    if (this_present_roleType || that_present_roleType) {
      if (!(this_present_roleType && that_present_roleType))
        return false;
      if (this.roleType != that.roleType)
        return false;
    }

    boolean this_present_hill = true;
    boolean that_present_hill = true;
    if (this_present_hill || that_present_hill) {
      if (!(this_present_hill && that_present_hill))
        return false;
      if (this.hill != that.hill)
        return false;
    }

    boolean this_present_river = true;
    boolean that_present_river = true;
    if (this_present_river || that_present_river) {
      if (!(this_present_river && that_present_river))
        return false;
      if (this.river != that.river)
        return false;
    }

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_gameId = true;
    boolean that_present_gameId = true;
    if (this_present_gameId || that_present_gameId) {
      if (!(this_present_gameId && that_present_gameId))
        return false;
      if (this.gameId != that.gameId)
        return false;
    }

    boolean this_present_steps = true;
    boolean that_present_steps = true;
    if (this_present_steps || that_present_steps) {
      if (!(this_present_steps && that_present_steps))
        return false;
      if (this.steps != that.steps)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + distance;

    hashCode = hashCode * 8191 + (int) (roleType);

    hashCode = hashCode * 8191 + hill;

    hashCode = hashCode * 8191 + river;

    hashCode = hashCode * 8191 + (int) (state);

    hashCode = hashCode * 8191 + gameId;

    hashCode = hashCode * 8191 + steps;

    return hashCode;
  }

  @Override
  public int compareTo(UserTr other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDistance()).compareTo(other.isSetDistance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distance, other.distance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRoleType()).compareTo(other.isSetRoleType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoleType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleType, other.roleType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHill()).compareTo(other.isSetHill());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHill()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hill, other.hill);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRiver()).compareTo(other.isSetRiver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRiver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.river, other.river);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGameId()).compareTo(other.isSetGameId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameId, other.gameId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSteps()).compareTo(other.isSetSteps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSteps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.steps, other.steps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UserTr(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("distance:");
    sb.append(this.distance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("roleType:");
    sb.append(this.roleType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hill:");
    sb.append(this.hill);
    first = false;
    if (!first) sb.append(", ");
    sb.append("river:");
    sb.append(this.river);
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gameId:");
    sb.append(this.gameId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("steps:");
    sb.append(this.steps);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserTrStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserTrStandardScheme getScheme() {
      return new UserTrStandardScheme();
    }
  }

  private static class UserTrStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserTr> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserTr struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DISTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.distance = iprot.readI32();
              struct.setDistanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.roleType = iprot.readByte();
              struct.setRoleTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HILL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hill = iprot.readI32();
              struct.setHillIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RIVER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.river = iprot.readI32();
              struct.setRiverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.state = iprot.readByte();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // GAME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gameId = iprot.readI32();
              struct.setGameIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STEPS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.steps = iprot.readI32();
              struct.setStepsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserTr struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DISTANCE_FIELD_DESC);
      oprot.writeI32(struct.distance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROLE_TYPE_FIELD_DESC);
      oprot.writeByte(struct.roleType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HILL_FIELD_DESC);
      oprot.writeI32(struct.hill);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RIVER_FIELD_DESC);
      oprot.writeI32(struct.river);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeByte(struct.state);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
      oprot.writeI32(struct.gameId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STEPS_FIELD_DESC);
      oprot.writeI32(struct.steps);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTrTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserTrTupleScheme getScheme() {
      return new UserTrTupleScheme();
    }
  }

  private static class UserTrTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserTr> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserTr struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetDistance()) {
        optionals.set(2);
      }
      if (struct.isSetRoleType()) {
        optionals.set(3);
      }
      if (struct.isSetHill()) {
        optionals.set(4);
      }
      if (struct.isSetRiver()) {
        optionals.set(5);
      }
      if (struct.isSetState()) {
        optionals.set(6);
      }
      if (struct.isSetGameId()) {
        optionals.set(7);
      }
      if (struct.isSetSteps()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDistance()) {
        oprot.writeI32(struct.distance);
      }
      if (struct.isSetRoleType()) {
        oprot.writeByte(struct.roleType);
      }
      if (struct.isSetHill()) {
        oprot.writeI32(struct.hill);
      }
      if (struct.isSetRiver()) {
        oprot.writeI32(struct.river);
      }
      if (struct.isSetState()) {
        oprot.writeByte(struct.state);
      }
      if (struct.isSetGameId()) {
        oprot.writeI32(struct.gameId);
      }
      if (struct.isSetSteps()) {
        oprot.writeI32(struct.steps);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserTr struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.distance = iprot.readI32();
        struct.setDistanceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.roleType = iprot.readByte();
        struct.setRoleTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hill = iprot.readI32();
        struct.setHillIsSet(true);
      }
      if (incoming.get(5)) {
        struct.river = iprot.readI32();
        struct.setRiverIsSet(true);
      }
      if (incoming.get(6)) {
        struct.state = iprot.readByte();
        struct.setStateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.gameId = iprot.readI32();
        struct.setGameIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.steps = iprot.readI32();
        struct.setStepsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

