/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.prosper.chasing.common.interfaces.data;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-05-08")
public class UserTr implements org.apache.thrift.TBase<UserTr, UserTr._Fields>, java.io.Serializable, Cloneable, Comparable<UserTr> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserTr");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DISTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("distance", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ROAD_FIELD_DESC = new org.apache.thrift.protocol.TField("road", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField HILL_FIELD_DESC = new org.apache.thrift.protocol.TField("hill", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField RIVER_FIELD_DESC = new org.apache.thrift.protocol.TField("river", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserTrStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserTrTupleSchemeFactory());
  }

  public int id; // required
  public int distance; // required
  public int road; // required
  public int hill; // required
  public int river; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    DISTANCE((short)2, "distance"),
    ROAD((short)3, "road"),
    HILL((short)4, "hill"),
    RIVER((short)5, "river");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // DISTANCE
          return DISTANCE;
        case 3: // ROAD
          return ROAD;
        case 4: // HILL
          return HILL;
        case 5: // RIVER
          return RIVER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __DISTANCE_ISSET_ID = 1;
  private static final int __ROAD_ISSET_ID = 2;
  private static final int __HILL_ISSET_ID = 3;
  private static final int __RIVER_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISTANCE, new org.apache.thrift.meta_data.FieldMetaData("distance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROAD, new org.apache.thrift.meta_data.FieldMetaData("road", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HILL, new org.apache.thrift.meta_data.FieldMetaData("hill", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RIVER, new org.apache.thrift.meta_data.FieldMetaData("river", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserTr.class, metaDataMap);
  }

  public UserTr() {
  }

  public UserTr(
    int id,
    int distance,
    int road,
    int hill,
    int river)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.distance = distance;
    setDistanceIsSet(true);
    this.road = road;
    setRoadIsSet(true);
    this.hill = hill;
    setHillIsSet(true);
    this.river = river;
    setRiverIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserTr(UserTr other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.distance = other.distance;
    this.road = other.road;
    this.hill = other.hill;
    this.river = other.river;
  }

  public UserTr deepCopy() {
    return new UserTr(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setDistanceIsSet(false);
    this.distance = 0;
    setRoadIsSet(false);
    this.road = 0;
    setHillIsSet(false);
    this.hill = 0;
    setRiverIsSet(false);
    this.river = 0;
  }

  public int getId() {
    return this.id;
  }

  public UserTr setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getDistance() {
    return this.distance;
  }

  public UserTr setDistance(int distance) {
    this.distance = distance;
    setDistanceIsSet(true);
    return this;
  }

  public void unsetDistance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISTANCE_ISSET_ID);
  }

  /** Returns true if field distance is set (has been assigned a value) and false otherwise */
  public boolean isSetDistance() {
    return EncodingUtils.testBit(__isset_bitfield, __DISTANCE_ISSET_ID);
  }

  public void setDistanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISTANCE_ISSET_ID, value);
  }

  public int getRoad() {
    return this.road;
  }

  public UserTr setRoad(int road) {
    this.road = road;
    setRoadIsSet(true);
    return this;
  }

  public void unsetRoad() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROAD_ISSET_ID);
  }

  /** Returns true if field road is set (has been assigned a value) and false otherwise */
  public boolean isSetRoad() {
    return EncodingUtils.testBit(__isset_bitfield, __ROAD_ISSET_ID);
  }

  public void setRoadIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROAD_ISSET_ID, value);
  }

  public int getHill() {
    return this.hill;
  }

  public UserTr setHill(int hill) {
    this.hill = hill;
    setHillIsSet(true);
    return this;
  }

  public void unsetHill() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HILL_ISSET_ID);
  }

  /** Returns true if field hill is set (has been assigned a value) and false otherwise */
  public boolean isSetHill() {
    return EncodingUtils.testBit(__isset_bitfield, __HILL_ISSET_ID);
  }

  public void setHillIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HILL_ISSET_ID, value);
  }

  public int getRiver() {
    return this.river;
  }

  public UserTr setRiver(int river) {
    this.river = river;
    setRiverIsSet(true);
    return this;
  }

  public void unsetRiver() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RIVER_ISSET_ID);
  }

  /** Returns true if field river is set (has been assigned a value) and false otherwise */
  public boolean isSetRiver() {
    return EncodingUtils.testBit(__isset_bitfield, __RIVER_ISSET_ID);
  }

  public void setRiverIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RIVER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case DISTANCE:
      if (value == null) {
        unsetDistance();
      } else {
        setDistance((Integer)value);
      }
      break;

    case ROAD:
      if (value == null) {
        unsetRoad();
      } else {
        setRoad((Integer)value);
      }
      break;

    case HILL:
      if (value == null) {
        unsetHill();
      } else {
        setHill((Integer)value);
      }
      break;

    case RIVER:
      if (value == null) {
        unsetRiver();
      } else {
        setRiver((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case DISTANCE:
      return getDistance();

    case ROAD:
      return getRoad();

    case HILL:
      return getHill();

    case RIVER:
      return getRiver();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case DISTANCE:
      return isSetDistance();
    case ROAD:
      return isSetRoad();
    case HILL:
      return isSetHill();
    case RIVER:
      return isSetRiver();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserTr)
      return this.equals((UserTr)that);
    return false;
  }

  public boolean equals(UserTr that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_distance = true;
    boolean that_present_distance = true;
    if (this_present_distance || that_present_distance) {
      if (!(this_present_distance && that_present_distance))
        return false;
      if (this.distance != that.distance)
        return false;
    }

    boolean this_present_road = true;
    boolean that_present_road = true;
    if (this_present_road || that_present_road) {
      if (!(this_present_road && that_present_road))
        return false;
      if (this.road != that.road)
        return false;
    }

    boolean this_present_hill = true;
    boolean that_present_hill = true;
    if (this_present_hill || that_present_hill) {
      if (!(this_present_hill && that_present_hill))
        return false;
      if (this.hill != that.hill)
        return false;
    }

    boolean this_present_river = true;
    boolean that_present_river = true;
    if (this_present_river || that_present_river) {
      if (!(this_present_river && that_present_river))
        return false;
      if (this.river != that.river)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_distance = true;
    list.add(present_distance);
    if (present_distance)
      list.add(distance);

    boolean present_road = true;
    list.add(present_road);
    if (present_road)
      list.add(road);

    boolean present_hill = true;
    list.add(present_hill);
    if (present_hill)
      list.add(hill);

    boolean present_river = true;
    list.add(present_river);
    if (present_river)
      list.add(river);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserTr other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistance()).compareTo(other.isSetDistance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distance, other.distance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoad()).compareTo(other.isSetRoad());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoad()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.road, other.road);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHill()).compareTo(other.isSetHill());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHill()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hill, other.hill);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRiver()).compareTo(other.isSetRiver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRiver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.river, other.river);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserTr(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("distance:");
    sb.append(this.distance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("road:");
    sb.append(this.road);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hill:");
    sb.append(this.hill);
    first = false;
    if (!first) sb.append(", ");
    sb.append("river:");
    sb.append(this.river);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserTrStandardSchemeFactory implements SchemeFactory {
    public UserTrStandardScheme getScheme() {
      return new UserTrStandardScheme();
    }
  }

  private static class UserTrStandardScheme extends StandardScheme<UserTr> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserTr struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DISTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.distance = iprot.readI32();
              struct.setDistanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ROAD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.road = iprot.readI32();
              struct.setRoadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HILL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hill = iprot.readI32();
              struct.setHillIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RIVER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.river = iprot.readI32();
              struct.setRiverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserTr struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISTANCE_FIELD_DESC);
      oprot.writeI32(struct.distance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROAD_FIELD_DESC);
      oprot.writeI32(struct.road);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HILL_FIELD_DESC);
      oprot.writeI32(struct.hill);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RIVER_FIELD_DESC);
      oprot.writeI32(struct.river);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTrTupleSchemeFactory implements SchemeFactory {
    public UserTrTupleScheme getScheme() {
      return new UserTrTupleScheme();
    }
  }

  private static class UserTrTupleScheme extends TupleScheme<UserTr> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserTr struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetDistance()) {
        optionals.set(1);
      }
      if (struct.isSetRoad()) {
        optionals.set(2);
      }
      if (struct.isSetHill()) {
        optionals.set(3);
      }
      if (struct.isSetRiver()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetDistance()) {
        oprot.writeI32(struct.distance);
      }
      if (struct.isSetRoad()) {
        oprot.writeI32(struct.road);
      }
      if (struct.isSetHill()) {
        oprot.writeI32(struct.hill);
      }
      if (struct.isSetRiver()) {
        oprot.writeI32(struct.river);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserTr struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.distance = iprot.readI32();
        struct.setDistanceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.road = iprot.readI32();
        struct.setRoadIsSet(true);
      }
      if (incoming.get(3)) {
        struct.hill = iprot.readI32();
        struct.setHillIsSet(true);
      }
      if (incoming.get(4)) {
        struct.river = iprot.readI32();
        struct.setRiverIsSet(true);
      }
    }
  }

}

